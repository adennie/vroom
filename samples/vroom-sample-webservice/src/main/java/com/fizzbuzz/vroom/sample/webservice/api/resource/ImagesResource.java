package com.fizzbuzz.vroom.sample.webservice.api.resource;

/*
 * Copyright (c) 2013 Fizz Buzz LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.fizzbuzz.vroom.core.api.application.VroomApplication;
import com.fizzbuzz.vroom.core.api.resource.KeyedObjectCollectionResource;
import com.fizzbuzz.vroom.core.api.resource.VroomResource;
import com.fizzbuzz.vroom.sample.webservice.api.application.Uris;
import com.fizzbuzz.vroom.sample.webservice.biz.ImageUploaderBiz;
import com.fizzbuzz.vroom.sample.webservice.biz.ImagesBiz;
import com.fizzbuzz.vroom.sample.webservice.domain.Image;
import com.fizzbuzz.vroom.sample.webservice.domain.Images;
import com.google.appengine.api.blobstore.BlobstoreService;
import com.google.appengine.api.blobstore.BlobstoreServiceFactory;
import com.google.appengine.api.blobstore.FileInfo;
import org.restlet.Request;
import org.restlet.data.Status;
import org.restlet.engine.converter.ConverterHelper;
import org.restlet.ext.servlet.ServletUtils;
import org.restlet.representation.Representation;
import org.restlet.resource.Post;
import org.restlet.routing.Redirector;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Map;

public class ImagesResource extends KeyedObjectCollectionResource<Images, Image> {

    final static String IMAGE_BUCKET = "fitivity-images";
    static final String UPLOADED_BLOBINFO_ATTR =
            "com.google.appengine.api.blobstore.upload.blobinfos";
    private final org.slf4j.Logger mLogger = LoggerFactory.getLogger(PackageLogger.TAG);

    static public void register(List<ConverterHelper> converterHelpers) {
        VroomResource.registerResource(ImagesResource.class, Uris.IMAGES);
    }

    @Post("PNG image | GIF image")
    public void postResource(final Representation rep) {

        try {
            // gets request and checks for attributes attached from blobstore
            // on first pass (i.e. from multipart formdata), attributes will return null
            // on second pass (i.e. from upload URL), attributes will contain blobinfo
            Request restletRequest = getRequest();
            HttpServletRequest servletRequest = ServletUtils.getRequest(restletRequest);
            Map<String, List<Map<String, String>>> attributes =
                    (Map<String, List<Map<String, String>>>) servletRequest.getAttribute(UPLOADED_BLOBINFO_ATTR);

            if (attributes == null) {

                // takes multipart-form and redirects to generated blobstore upload URL
                String callbackUrl = VroomApplication.getRootUrl() + getCanonicalUriPathTemplate(ImagesResource.class);
                String uploadUrl = new ImageUploaderBiz().getImageUploadUrl(callbackUrl);
                Redirector redirector = new Redirector(getContext(), uploadUrl, Redirector.MODE_CLIENT_TEMPORARY);
                redirector.handle(getRequest(), getResponse());
                mLogger.debug("redirected to upload");
            } else {
                mLogger.debug("retrieved redirect from upload");

                // takes redirected request after processing multipart-form
                // and gets the metadata generated by the blobstore from the uploaded file
                // metadata is parsed from blobstoreService and extracts BlobKey that is needed
                // to access respective blobstore metadata
                BlobstoreService blobstoreService = BlobstoreServiceFactory.getBlobstoreService();
                Map<String, List<FileInfo>> fileInfos = blobstoreService.getFileInfos(servletRequest);
                FileInfo fileInfo = null;
                for (List<FileInfo> fileInfoList : fileInfos.values()) {
                    for (FileInfo file : fileInfoList) {
                        fileInfo = file;
                    }
                    break;
                }
                if (fileInfo == null) {
                    throw new IllegalArgumentException("No FileInfo found in request body");
                }

                Image image = new Image(null);
                String imageFileName = fileInfo.getGsObjectName();
                ((ImagesBiz) getCollectionBiz()).addImage(image, imageFileName);

                // we're not going to send a representation of the image back to the client, since they probably
                // don't want that.  Instead, we'll send them a 201, with the URL to the created image in the
                // Location header of the response.
                getResponse().setStatus(Status.SUCCESS_CREATED);
                // set the Location response header
                getResponse().setLocationRef(getElementCanonicalUri(image));
            }
        } catch (RuntimeException e) {
            doCatch(e);
        }
    }

    @Override
    protected void doInit() {
        super.doInit(Images.class, new ImagesBiz(), ImageResource.class);
    }
}
